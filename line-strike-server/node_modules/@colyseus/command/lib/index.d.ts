import { Room } from "colyseus";
export declare abstract class Command<R extends Room = Room, Payload = unknown> {
    payload: Payload;
    room: R;
    state: R['state'];
    clock: Room['clock'];
    setPayload(payload: this['payload']): this;
    validate?(payload: this['payload']): boolean;
    abstract execute(payload: this['payload']): Array<Command> | Command | void | Promise<Array<Command>> | Promise<Command> | Promise<unknown>;
    /**
     * Delay the execution by `milliseconds`
     * @param milliseconds
     */
    protected delay(milliseconds: number): Promise<unknown>;
}
export declare class Dispatcher<R extends Room> {
    room: R;
    stopped: boolean;
    constructor(room: R);
    stop(): void;
    dispatch<T extends Command>(command: T, payload?: T['payload']): void | Promise<unknown>;
    private getNextCommands;
}
